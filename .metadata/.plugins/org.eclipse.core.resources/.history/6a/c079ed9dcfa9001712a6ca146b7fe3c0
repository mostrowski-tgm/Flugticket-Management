package mvu;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Vector;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

public class FlightWindow implements ActionListener{
	private static JFrame frame = new JFrame("Titel1");
	private static JPanel pane = new JPanel();
	private static JLabel JAbflugland = new JLabel("Abflugland");
	private static JLabel Jzielland = new JLabel("Zielland");
	private static JLabel JAbflughafen = new JLabel("Abflughafen");
	private static JLabel JZielflughafen = new JLabel("Zielflughafen");
	
	private static String countrieList1[];
	private static String countrieList2[];
	private static JComboBox<String> countrieDrop1;
	private static JComboBox<String> countrieDrop2;
	private static String selctedCountrie1;
	private static String selctedCountrie2;
	
	private static String[] airportAr1; 
	private static String[] airportAr2;
	private static JComboBox<String> airportDrop1;
	private static JComboBox<String> airportDrop2;
	private static String selectedAirport1;
	private static String selectedAirport2;
	
	private static String[] columnNames = {"Airline", "Flightnumber", "Departure Airport", "Departure Time", "Destination Airport", "Destination Time", "Planetype"};
	private static String depAirportCode;
	private static String destAirportCode;
	private static DefaultTableModel model;
	private static String[] possflightAr;
	private static JTable possflightsTable;
	
	private static JFrame bFrame;
	
	private static DatabaseWindow dw;
	private static DatabaseConnection dc;
	/**
	 * Erstellt das GUI, hat ein Gridlayout
	 */
	public FlightWindow(){
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(500, 500);
		
		pane.setLayout(new GridBagLayout());
		
		GridBagConstraints c = new GridBagConstraints();
		c.insets = new Insets(5,5,5,5);
		
		JAbflugland.setFont(JAbflugland.getFont().deriveFont(32.0f));
		Jzielland.setFont(Jzielland.getFont().deriveFont(32.0f));
		
		c.gridx = 0;
		c.gridy = 0;
		pane.add(JAbflugland,c);
		
		c.gridx = 1;
		c.gridy = 0;
		pane.add(Jzielland,c);
		
		c.gridx = 0;
		c.gridy = 1;
		c.weightx=1.;
		//Abflugland bestimmen
		countrieList1 = dc.getAllCountries();
		countrieDrop1 = new JComboBox<String>(countrieList1);
		countrieDrop1.setActionCommand("countrySelect1");
		countrieDrop1.addActionListener(this);
		pane.add(countrieDrop1,c);
		
		c.gridx = 1;
		c.gridy = 1;
		c.weightx=1.;
		
		//Zielland bestimmen
		countrieList2 = dc.getAllCountries();
		countrieDrop2 = new JComboBox<String>(countrieList2);
		countrieDrop2.setActionCommand("countrySelect2");
		countrieDrop2.addActionListener(this);
		pane.add(countrieDrop2,c);
		
		//Font der JLabels ändern
		JAbflughafen.setFont(JAbflughafen.getFont().deriveFont(32.0f));
		JZielflughafen.setFont(JZielflughafen.getFont().deriveFont(32.0f));
		
		c.gridx = 0;
		c.gridy = 2;
		c.weightx=1.;
		pane.add(JAbflughafen,c);
		
		c.gridx = 1;
		c.gridy = 2;
		c.weightx=1.;
		pane.add(JZielflughafen,c);
		
		c.gridx = 0;
		c.gridy = 3;
		c.weightx=1.;
		
		//Dropdown Liste für Flughaefen dynamisch erzeugt nachdem user Land ausgewählt hat
		//airportList ist ein String Array von Flughaefen in einem Land
		airportAr1 = null;
		airportDrop1 = new JComboBox<String>();
		airportDrop1.setActionCommand("airportDrop1");
		airportDrop1.addActionListener(this);
		pane.add(airportDrop1,c);
		
		c.gridx = 1;
		c.gridy = 3;
		c.weightx=1.;
		
		airportAr2 = null;
		airportDrop2 = new JComboBox<String>();
		airportDrop2.setActionCommand("airportDrop2");
		airportDrop2.addActionListener(this);
		pane.add(airportDrop2,c);
		
		//TODO Platzalter für mögliche Flüge
		c.gridx = 0;
		c.gridy = 4;
		c.gridwidth = 2;
		c.weightx=1.0;
		JLabel possibleflightsLabel = new JLabel("Möglichen Flüge:");
		possibleflightsLabel.setFont(possibleflightsLabel.getFont().deriveFont(32.0f));
		pane.add(possibleflightsLabel, c);
		
		c.gridx = 0;
		c.gridy = 5;
		c.weightx=1.0;
		c.gridwidth = 4;
		possflightAr = null;
		model = new DefaultTableModel(columnNames, 0){
			@Override
			public boolean isCellEditable(int row, int column){
				return false;
			}
		};
		possflightsTable = new JTable(model);
		pane.add(new JScrollPane(possflightsTable), c);
		
		frame.add(pane);
		frame.pack();
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
	}
	
	/**
	 * Um dynamisch eine Liste zu erstellen ist diese Funktion seperat nötig
	 * @param country
	 * @return String Array von den Flughäfen eines Landes
	 */
	public static String[] getAirports(String country){
		return dc.getAirportsCountry(country);
	}
	
	public static void connectToDatabase(String hostname, String port, String user, String password, String databasename){
		dc = new DatabaseConnection(hostname,port,user,password,databasename);
		FlightWindow fw = new FlightWindow();
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		if(e.getActionCommand().equals("countrySelect1")){
			selctedCountrie1 = (String) countrieDrop1.getSelectedItem();
			airportAr1 = dc.getAirportsCountry(selctedCountrie1);
			airportDrop1.removeAllItems();
			for(int i = 0; i<airportAr1.length;i++){
				airportDrop1.addItem(airportAr1[i]);
			}
		}else if(e.getActionCommand().equals("countrySelect2")){
			selctedCountrie2 = (String) countrieDrop2.getSelectedItem();
			airportAr2 = dc.getAirportsCountry(selctedCountrie2);
			airportDrop2.removeAllItems();
			for(int i = 0; i<airportAr2.length;i++){
				airportDrop2.addItem(airportAr2[i]);
			}
		}else if(e.getActionCommand().equals("airportDrop1") || e.getActionCommand().equals("airportDrop2")){
			selectedAirport1 = (String) airportDrop1.getSelectedItem();
			selectedAirport2 = (String) airportDrop2.getSelectedItem();
			if(selectedAirport1 != null && selectedAirport2 != null){
				depAirportCode = dc.getAirportcode(selctedCountrie1, selectedAirport1);
				destAirportCode = dc.getAirportcode(selctedCountrie2, selectedAirport2);
				try{
					//int lengthOfFlights = dc.getFlights(depAirportCode, destAirportCode).size();
					for(int i = 0; i<model.getRowCount(); i++)model.removeRow(i);
					int lengthOfFlights = dc.getFlights("CMA", "IZT").size();
					if(lengthOfFlights != 0){
						model.fireTableRowsDeleted(0, model.getRowCount());
						for(int i = 0; i<lengthOfFlights;i++){
							//ArrayList<Object[]> ar = dc.getFlights(depAirportCode, destAirportCode);
							ArrayList<Object[]> ar = dc.getFlights("CMA", "IZT");
							model.addRow(ar.get(i));
							possflightsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
								@Override
								public void valueChanged(ListSelectionEvent e) {
									if(e.getValueIsAdjusting()){
										bFrame = new JFrame("Booking");
										frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
										
										JPanel bPanel = new JPanel();
										bPanel.setLayout(new GridBagLayout());
			
										GridBagConstraints c = new GridBagConstraints();
										c.insets = new Insets(5,5,5,5);
										
										c.gridx = 0;
										c.gridy = 0;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JLabel fromLabel = new JLabel("From:");
										bPanel.add(fromLabel,c);
										
										c.gridx = 1;
										c.gridy = 0;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JLabel fromAirport = new JLabel(possflightsTable.getValueAt(possflightsTable.getSelectedRow(),2).toString());
										bPanel.add(fromAirport,c);
										
										
										c.gridx = 0;
										c.gridy = 1;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JLabel toLabel = new JLabel("To:");
										bPanel.add(toLabel,c);
										
										c.gridx = 1;
										c.gridy = 1;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JLabel toAirport = new JLabel(possflightsTable.getValueAt(possflightsTable.getSelectedRow(),4).toString());
										bPanel.add(toAirport,c);
										
										c.gridx = 0;
										c.gridy = 2;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JLabel depTimeLabel = new JLabel("Departure Time:");
										bPanel.add(depTimeLabel,c);
										
										c.gridx = 1;
										c.gridy = 2;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JLabel depTime = new JLabel(possflightsTable.getValueAt(possflightsTable.getSelectedRow(),3).toString());
										bPanel.add(depTime,c);
										
										c.gridx = 0;
										c.gridy = 3;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JLabel destTimeLabel = new JLabel("Destination Time:");
										bPanel.add(destTimeLabel,c);
										
										c.gridx = 1;
										c.gridy = 3;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JLabel destTime = new JLabel(possflightsTable.getValueAt(possflightsTable.getSelectedRow(),5).toString());
										bPanel.add(destTime,c);
										
										c.gridx = 0;
										c.gridy = 4;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JLabel airlineLabel = new JLabel("Airline:");
										bPanel.add(airlineLabel,c);
										
										c.gridx = 1;
										c.gridy = 4;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JLabel arlineTime = new JLabel(possflightsTable.getValueAt(possflightsTable.getSelectedRow(),1).toString());
										bPanel.add(arlineTime,c);
										
										c.gridx = 0;
										c.gridy = 5;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JLabel planeLabel = new JLabel("Planetyp:");
										bPanel.add(planeLabel,c);
										
										c.gridx = 1;
										c.gridy = 5;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JLabel planeTime = new JLabel(possflightsTable.getValueAt(possflightsTable.getSelectedRow(),6).toString());
										bPanel.add(planeTime,c);
										
										c.gridx = 0;
										c.gridy = 6;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JLabel flightnrLabel = new JLabel("Flightnr:");
										bPanel.add(flightnrLabel,c);
										
										c.gridx = 1;
										c.gridy = 6;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JLabel flightnrTime = new JLabel(possflightsTable.getValueAt(possflightsTable.getSelectedRow(),2).toString());
										bPanel.add(flightnrTime,c);
										
										c.gridx = 0;
										c.gridy = 7;
										c.weightx=1.;
										c.gridwidth=2;
									    c.fill=GridBagConstraints.HORIZONTAL;
									    JSeparator sep = new JSeparator();
										bPanel.add(sep,c);
										
										c.gridx = 0;
										c.gridy = 8;
										c.gridwidth = 2;
										JLabel ticketBuchungLabel = new JLabel("Ticket buchen");
										ticketBuchungLabel.setFont(ticketBuchungLabel.getFont().deriveFont(20.0f));
										bPanel.add(ticketBuchungLabel,c);
										
										c.gridx = 0;
										c.gridy = 9;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JLabel NameLabel = new JLabel("Vorname:");
										bPanel.add(NameLabel,c);
										
										c.gridx = 1;
										c.gridy = 9;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JTextField nameInput = new JTextField();
										bPanel.add(nameInput,c);
										
										c.gridx = 0;
										c.gridy = 10;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JLabel lastNameLabel = new JLabel("Nachname:");
										bPanel.add(lastNameLabel,c);
										
										c.gridx = 1;
										c.gridy = 10;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JTextField lastNameInput = new JTextField();
										bPanel.add(lastNameInput,c);
										
										c.gridx = 0;
										c.gridy = 11;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
										JLabel reiheLabel = new JLabel("Reihe:");
										bPanel.add(lastNameLabel,c);
										
										c.gridx = 1;
										c.gridy = 12;
										c.weightx=1.;
									    c.fill=GridBagConstraints.HORIZONTAL;
									    String[] reiheAr = {"A","B","C","D","F"};
									    JComboBox<String> reiheDrop = new JComboBox<String>(reiheAr);
									    
										bPanel.add(reiheDrop,c);
										
										bFrame.add(bPanel);
										bFrame.pack();
										bFrame.setLocationRelativeTo(null);
										bFrame.setVisible(true);
									}
									
								}
							});
							frame.pack();
						}
					}
				}catch(Exception exc){
					System.out.println("Kein Flug vorhanden!");
				}
			}
			//Die Zeile gilt wenn der User auf einen Flug klickt
		}else if(e.getActionCommand().equals("possibleflightsLabel")){
			
		}
	}
	
	public static void main(String[] args){
		dw = new DatabaseWindow();
	}
}
